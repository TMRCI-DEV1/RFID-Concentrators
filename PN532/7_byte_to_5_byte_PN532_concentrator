#include <SPI.h>
#include <PN532_SPI.h>
#include <PN532.h>
#include <NfcAdapter.h>

// Define the SS (Slave Select) pins for each reader
#define SCK_PIN 52
#define MISO_PIN 50
#define MOSI_PIN 51

#define SS_PIN_1 10
#define SS_PIN_2 8
#define SS_PIN_3 6
#define SS_PIN_4 4
#define SS_PIN_5 2
#define SS_PIN_6 A14
#define SS_PIN_7 A12
#define SS_PIN_8 A10

// Create PN532_SPI objects
PN532_SPI interface1(SPI, SS_PIN_1);
PN532_SPI interface2(SPI, SS_PIN_2);
PN532_SPI interface3(SPI, SS_PIN_3);
PN532_SPI interface4(SPI, SS_PIN_4);
PN532_SPI interface5(SPI, SS_PIN_5);
PN532_SPI interface6(SPI, SS_PIN_6);
PN532_SPI interface7(SPI, SS_PIN_7);
PN532_SPI interface8(SPI, SS_PIN_8);

// Create an array of NfcAdapter objects (one for each reader)
NfcAdapter rfid[] = {
  NfcAdapter(interface1),
  NfcAdapter(interface2),
  NfcAdapter(interface3),
  NfcAdapter(interface4),
  NfcAdapter(interface5),
  NfcAdapter(interface6),
  NfcAdapter(interface7),
  NfcAdapter(interface8)
};

const int numReaders = sizeof(rfid) / sizeof(NfcAdapter);

// Create an array to store the new UID for each reader
byte nuidPICC[8][7];

// Create an array of reader IDs (A for reader 1, B for reader 2, etc.)
const byte readerIDs[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'};

void setup() {
  Serial.begin(9600);
  SPI.begin();

  for (uint8_t i = 0; i < numReaders; i++) {
    rfid[i].begin();
  }
}

void loop() {
  for (uint8_t reader = 0; reader < numReaders; reader++) {
    if (rfid[reader].tagPresent()) {
      NfcTag tag = rfid[reader].read();
      tag.print();
      String tagId = tag.getUidString();
      byte uid[7];
      byte uidLength = tag.getUidLength();
      tag.getUid(uid, uidLength);

      memcpy(nuidPICC[reader], uid, uidLength);

      byte checksum = nuidPICC[reader][0];
      for (byte i = 1; i < 5; i++) { // Only use the first 5 UID bytes for checksum calculation
        checksum ^= nuidPICC[reader][i];
      }

      Serial.write(readerIDs[reader]);

      for (byte i = 0; i < 5; i++) { // Only send the first 5 UID bytes
        Serial.print(nuidPICC[reader][i] < 0x10 ? "0" : "");
        Serial.print(nuidPICC[reader][i], HEX);
      }

      Serial.print(checksum < 0x10 ? "0" : "");
      Serial.print(checksum, HEX);

      Serial.write(0x0D); // CR
      Serial.write(0x0A); // LF
      Serial.write('>'); // '>' character

      // Add a delay and wait for the tag to be removed
      delay(100);
      while (rfid[reader].tagPresent()) {
        delay(50); // Small delay to avoid reading too fast
      }
    }
  }
}
