// The following sketch assumes the use of an Arduino Mega 2560 Rev3 with an Arduino Ethernet Shield 2, and 8 Seeedstudio 125KHZ RFID Readers. The code uses the SoftwareSerial library for serial communication with the RFID readers and the Ethernet library for communication over Ethernet.

// The sketch assumes that all eight RFID readers will use SoftwareSerial ports. Therefore, you will need to connect the TX pin of each reader to the corresponding RX pin on the Mega. You will need to connect the ground (GND) of each RFID reader to a ground pin on the Mega and provide power to each reader as specified in the manufacturer's documentation.

// The following pins are used for the connected Arduino Ethernet Shield 2:
// - digital pins 50, 51, and 52 on the Mega are used for SPI communication with both the W5500 and SD card.
// - Pin 10 is used to select the W5500 and pin 4 for the SD card (NOT used).
// - On the Mega, the hardware SS pin, 53, is not used to select either the W5500 or the SD card but must be kept as an output or the SPI interface won't work.

// In summary, you will need to connect the following pins from the RFID readers to the Mega:
// RFID 1 OUTPUT -> Mega INPUT (software serial) pin 2
// RFID 2 OUTPUT -> Mega INPUT (software serial) pin 4
// RFID 3 OUTPUT -> Mega INPUT (software serial) pin 6
// RFID 4 OUTPUT -> Mega INPUT (software serial) pin 8
// RFID 5 OUTPUT -> Mega INPUT (software serial) pin 11
// RFID 6 OUTPUT -> Mega INPUT (software serial) pin 13
// RFID 7 OUTPUT -> Mega INPUT (software serial) pin A1
// RFID 8 OUTPUT -> Mega INPUT (software serial) pin A3

// Import required libraries
#include <SoftwareSerial.h> // SoftwareSerial library for serial communication with the RFID readers
#include <Ethernet.h> // Ethernet library for communication over Ethernet
#include <SPI.h> // SPI library for communication with the Ethernet module

// MAC address of the Ethernet module
const byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

// IP address of the Ethernet module
const IPAddress ip(192, 168, 51, 200);

// Size of the buffer used to store RFID tag data
const int BUFFER_SIZE = 10;

// Length of the RFID tag
const int TAG_LENGTH = 8;

// Create an array of SoftwareSerial objects to communicate with the RFID readers
SoftwareSerial rfidSerial[] = {
SoftwareSerial(2, 3), // RX, TX for reader A
SoftwareSerial(4, 5), // RX, TX for reader B
SoftwareSerial(6, 7), // RX, TX for reader C
SoftwareSerial(8, 9), // RX, TX for reader D
SoftwareSerial(11, 12), // RX, TX for reader E
SoftwareSerial(13, A0), // RX, TX for reader F
SoftwareSerial(A1, A2), // RX, TX for reader G
SoftwareSerial(A3, A4) // RX, TX for reader H
};

// Array of reader IDs, used to determine which reader has sent a tag
const char readerIDs[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'};

// TCP server object listening on port 8888
EthernetServer server(8888); 

// Define a two-dimensional array to store buffered tag data for each reader
char bufferedTagData[8][BUFFER_SIZE] = {0};

void setup() {
  // Initialize the SoftwareSerial objects
  for (int i = 0; i < 8; i++) {
    rfidSerial[i].begin(9600);
  }

  // Initialize Ethernet communication
  Ethernet.begin((uint8_t*)mac, ip);

  // Start the TCP server
  server.begin();
}

// This function runs repeatedly in the main loop
void loop() {
  // Check if data is available from any of the RFID readers
  for (int i = 0; i < 8; i++) {
    // If data is available from the current reader
      while (rfidSerial[i].available()) {
      // Read the tag data from the reader
      unsigned char tagData[BUFFER_SIZE];
      int count = 0;
      while (count < BUFFER_SIZE && rfidSerial[i].available()) {
        tagData[count++] = rfidSerial[i].read();
      }

      // Parse the tag data and send it to the client
      parseData(tagData, i);
    }
  }

  // Check if a client is connected to the server
  EthernetClient client = server.available();
  if (client && client.remoteIP() == IPAddress(192, 168, 50, 50)) {
    // Do nothing if the client is connected and its IP address matches the expected address
  }
}

// This function takes the tag data and the index of the reader that sent the tag data,
// formats the tag data as a string, adds the reader ID, and sends the data to the client.
void parseData(const unsigned char* data, const int readerIndex) {
  // Get the STX (start of text) byte, which identifies the reader that sent the tag
  const unsigned char stx = data[0];
  const char reader = getReaderID(stx);

  // Copy the tag data into a character array
  char tag[8];
  for (int i = 1; i <= 8; i++) {
    tag[i - 1] = *(data + i);
  }

  // Get the received checksum
  uint8_t checksum = data[9];

  // Create the output string
  char output[15];
  snprintf(output, sizeof(output), "%c%s%02X\r\n>", reader, tag, checksum);

  // If a client is connected, send the output string
  EthernetClient client = server.available();
  if (client && client.remoteIP() == IPAddress(192, 168, 50, 50)) {
    client.print(output);
  }
}

// This function takes an unsigned char representing the STX byte of the RFID tag data,
// and returns a char representing the reader ID that sent the tag data.
char getReaderID(const unsigned char id) {
  // A switch statement is used to check the value of the STX byte and determine the reader ID that sent the tag data.
  switch (id) {
    case 2: return 'A';   // If the STX byte is 2, the tag data was sent by reader A
    case 3: return 'B';   // If the STX byte is 3, the tag data was sent by reader B
    case 4: return 'C';   // If the STX byte is 4, the tag data was sent by reader C
    case 5: return 'D';   // If the STX byte is 5, the tag data was sent by reader D
    case 6: return 'E';   // If the STX byte is 6, the tag data was sent by reader E
    case 7: return 'F';   // If the STX byte is 7, the tag data was sent by reader F
    case 8: return 'G';   // If the STX byte is 8, the tag data was sent by reader G
    case 9: return 'H';   // If the STX byte is 9, the tag data was sent by reader H
    default: return 'X';  // If the STX byte is not one of the expected values, return 'X'
  }
}
