// Import Libraries
#include <SPI.h>  // SPI library for communicating with the MFRC522 reader
#include <MFRC522.h>  // MFRC522 library for reading RFID cards
#include <Ethernet.h> // Ethernet library for communication over Ethernet

// Define the MAC and IP addresses for the Ethernet module
const byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
const IPAddress ip(192, 168, 51, 200);      // Change as desired
EthernetServer server(8888); // TCP server object listening on port 8888 Change as desired

// Define the SS (Slave Select) and RST (Reset) pins for each reader
#define SS_PIN_1 10  // Slave Select pin for reader 1
#define RST_PIN_1 9  // Reset pin for reader 1

#define SS_PIN_2 8  // Slave Select pin for reader 2
#define RST_PIN_2 7  // Reset pin for reader 2

#define SS_PIN_3 6  // Slave Select pin for reader 3
#define RST_PIN_3 5  // Reset pin for reader 3

#define SS_PIN_4 4  // Slave Select pin for reader 4
#define RST_PIN_4 3  // Reset pin for reader 4

#define SS_PIN_5 2  // Slave Select pin for reader 5
#define RST_PIN_5 A0  // Reset pin for reader 5

#define SS_PIN_6 A1  // Slave Select pin for reader 6
#define RST_PIN_6 A2  // Reset pin for reader 6

// Create an array of MFRC522 objects (one for each reader)
MFRC522 rfid[6] = {
  MFRC522(SS_PIN_1, RST_PIN_1),  // Instance of the class for reader 1
  MFRC522(SS_PIN_2, RST_PIN_2),  // Instance of the class for reader 2
  MFRC522(SS_PIN_3, RST_PIN_3),  // Instance of the class for reader 3
  MFRC522(SS_PIN_4, RST_PIN_4),  // Instance of the class for reader 4
  MFRC522(SS_PIN_5, RST_PIN_5),  // Instance of the class for reader 5
  MFRC522(SS_PIN_6, RST_PIN_6),  // Instance of the class for reader 6
};

// Create a MIFARE_Key object for the authentication key
MFRC522::MIFARE_Key key;

// Create an array to store the new UID for each reader
byte nuidPICC[6][7];

// Create an array of reader IDs (A for reader 1, B for reader 2, etc.)
byte readerIDs[6] = {'A', 'B', 'C', 'D', 'E', 'F'};

void setup() { 
  // Initialize serial communication with the computer (optional, for debugging purposes)
  Serial.begin(9600, SERIAL_8N1);

  // Initialize the SPI bus
  SPI.begin();

  // Initialize Ethernet communication
  Ethernet.begin((uint8_t*)mac, ip);

  // Start the TCP server
  server.begin();

  for (byte i = 0; i < 6; i++) {
    rfid[i].PCD_Init();
    rfid[i].PCD_SetAntennaGain(rfid[i].RxGain_max);
  }

  // Set the authentication key to 0xFF for all 6 key bytes
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
}

void loop() {
  for (byte reader = 0; reader < 6; reader++) {
    if (rfid[reader].PICC_IsNewCardPresent() && rfid[reader].PICC_ReadCardSerial()) {
      for (byte i = 0; i < rfid[reader].uid.size; i++) {
        nuidPICC[reader][i] = rfid[reader].uid.uidByte[i];
      }

      byte checksum = nuidPICC[reader][0];
      for (byte i = 1; i < 5; i++) { // Only use the first 5 UID bytes for checksum calculation
        checksum = checksum ^ nuidPICC[reader][i];
      }

      // Check if a client is connected to the server
      EthernetClient client = server.available();
      client = server.accept(); // Accept incoming connections
      if (client && client.remoteIP() == IPAddress(192, 168, 50, 50)) {   // Change to JMRI's IP address as required
        client.write(readerIDs[reader]);

        for (byte i = 0; i < 5; i++) { // Only send the first 5 UID bytes
          char buffer[3];
          snprintf(buffer, sizeof(buffer), "%02X", nuidPICC[reader][i]);
          client.print(buffer);
        }

        char checksumBuffer[3];
        snprintf(checksumBuffer, sizeof(checksumBuffer), "%02X", checksum);
        client.print(checksumBuffer);

        client.write(0x0D); // CR
        client.write(0x0A); // LF
        client.write('>'); // ETX replaced by '>'
      }

      rfid[reader].PICC_HaltA();
      rfid[reader].PCD_StopCrypto1();
    }
  }
}
